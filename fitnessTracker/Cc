import React, { useState, useEffect } from "react";
import axios from "axios";

const StepsTracker = () => {
  const [formData, setFormData] = useState({
    date: "",
    distance: "",
    steps: "",
  });
  const [history, setHistory] = useState([]); // Holds the history of steps
  const [error, setError] = useState("");
  const [message, setMessage] = useState("");

  // Fetch the user's step tracker history on component mount
  useEffect(() => {
    const fetchHistory = async () => {
      const userId = localStorage.getItem("userId");
      if (!userId) {
        setError("User not logged in.");
        return;
      }

      try {
        const response = await axios.get(`http://localhost:8080/steps-tracker/${userId}`);
        setHistory(response.data);
      } catch (err) {
        console.error(err);
        setError("Failed to fetch steps history.");
      }
    };

    fetchHistory();
  }, []);

  // Automatically calculate steps based on distance
  useEffect(() => {
    if (formData.distance) {
      const stepsPerKm = 1312; // Average steps per km
      const steps = Math.round(formData.distance * stepsPerKm);
      setFormData((prevFormData) => ({
        ...prevFormData,
        steps,
      }));
    }
  }, [formData.distance]);

  // Handle input changes for form fields
  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData((prevFormData) => ({
      ...prevFormData,
      [name]: value,
    }));
  };

  // Handle save or update functionality
  const handleSaveOrUpdate = async () => {
    const userId = localStorage.getItem("userId");
    if (!userId) {
      setError("User not logged in.");
      return;
    }

    if (!formData.date || !formData.distance) {
      setError("Date and distance are required.");
      return;
    }

    try {
      if (formData.id) {
        // Update existing entry
        await axios.put(`http://localhost:8080/steps-tracker/${userId}/${formData.id}`, formData);
        setMessage("Steps updated successfully!");
      } else {
        // Save new entry
        await axios.post(`http://localhost:8080/steps-tracker/${userId}`, formData);
        setMessage("Steps added successfully!");
      }
      setError("");

      // Refresh the history
      const response = await axios.get(`http://localhost:8080/steps-tracker/${userId}`);
      setHistory(response.data);
      setFormData({ date: "", distance: "", steps: "" }); // Clear the form
    } catch (err) {
      console.error(err);
      setError("Failed to save or update steps.");
    }
  };

  // Handle delete functionality
  const handleDelete = async (entryId) => {
    const userId = localStorage.getItem("userId");
    if (!userId) {
      setError("User not logged in.");
      return;
    }

    try {
      await axios.delete(`http://localhost:8080/steps-tracker/${userId}/${entryId}`);
      setMessage("Entry deleted successfully!");
      setError("");

      // Refresh the history
      const response = await axios.get(`http://localhost:8080/steps-tracker/${userId}`);
      setHistory(response.data);
    } catch (err) {
      console.error(err);
      setError("Failed to delete entry.");
    }
  };

  return (
    <div className="container mt-5">
      <h2 className="text-center mb-4">Steps Tracker</h2>

      {/* Error and Success Messages */}
      {error && <div className="alert alert-danger">{error}</div>}
      {message && <div className="alert alert-success">{message}</div>}

      {/* Steps Tracker Form */}
      <div className="card mb-4">
        <div className="card-body">
          <h5 className="card-title">Add or Update Steps</h5>
          <div className="form-group mb-3">
            <label htmlFor="date">Date:</label>
            <input
              type="date"
              className="form-control"
              id="date"
              name="date"
              value={formData.date}
              onChange={handleChange}
            />
          </div>
          <div className="form-group mb-3">
            <label htmlFor="distance">Distance (in km):</label>
            <input
              type="number"
              className="form-control"
              id="distance"
              name="distance"
              value={formData.distance}
              onChange={handleChange}
            />
          </div>
          <div className="form-group mb-3">
            <label htmlFor="steps">Steps:</label>
            <input
              type="number"
              className="form-control"
              id="steps"
              name="steps"
              value={formData.steps}
              readOnly // Steps are auto-calculated
            />
          </div>
          <button className="btn btn-primary" onClick={handleSaveOrUpdate}>
            {formData.id ? "Update Steps" : "Add Steps"}
          </button>
        </div>
      </div>

      {/* Steps History Table */}
      <div className="card">
        <div className="card-body">
          <h5 className="card-title">Steps History</h5>
          <table className="table">
            <thead>
              <tr>
                <th>Date</th>
                <th>Distance (km)</th>
                <th>Steps</th>
                <th>Actions</th>
              </tr>
            </thead>
            <tbody>
              {history && history.length > 0 ? (
                history.map((entry) => (
                  <tr key={entry.id}>
                    <td>{entry.date}</td>
                    <td>{entry.distance}</td>
                    <td>{entry.steps}</td>
                    <td>
                      <button
                        className="btn btn-warning btn-sm me-2"
                        onClick={() =>
                          setFormData({
                            id: entry.id,
                            date: entry.date,
                            distance: entry.distance,
                            steps: entry.steps,
                          })
                        }
                      >
                        Update
                      </button>
                      <button
                        className="btn btn-danger btn-sm"
                        onClick={() => handleDelete(entry.id)}
                      >
                        Delete
                      </button>
                    </td>
                  </tr>
                ))
              ) : (
                <tr>
                  <td colSpan="4" className="text-center">
                    No steps history found.
                  </td>
                </tr>
              )}
            </tbody>
          </table>
        </div>
      </div>
    </div>
  );
};

export default StepsTracker;
